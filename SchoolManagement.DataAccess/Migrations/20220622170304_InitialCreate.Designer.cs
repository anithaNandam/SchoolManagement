// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagement.DataAccess.Models;

namespace SchoolManagement.DataAccess.Migrations
{
    [DbContext(typeof(SchoolEntities))]
    [Migration("20220622170304_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.BloodGroup", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.BusRoute", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<Guid>("LocationId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("BusRoute");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Category", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Class", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("Code");

                    b.HasIndex("StatusId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.ClassFee", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ClassId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<int?>("DiscountAmount");

                    b.Property<int>("FeeAmount");

                    b.Property<DateTime>("FeeDueDate");

                    b.Property<Guid>("FeeTypeId");

                    b.Property<int?>("FineAmount");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("ClassFee");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.ClassSection", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ClassId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("SectionId");

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StatusId");

                    b.ToTable("ClassSection");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.ClassStream", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ClassId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("SectionId");

                    b.Property<Guid>("StatusId");

                    b.Property<Guid>("StreamId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StreamId");

                    b.ToTable("ClassStream");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Fee", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Amount");

                    b.Property<int?>("CheckNumber");

                    b.Property<DateTime?>("ClearanceDate");

                    b.Property<string>("Comment")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("Discount");

                    b.Property<DateTime>("FeeDate");

                    b.Property<Guid>("FeeTypeId");

                    b.Property<int?>("Fine");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("PaymentModeId");

                    b.Property<Guid>("StudentId");

                    b.Property<string>("TransactionNo")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("PaymentModeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.FeePeriod", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Occurence");

                    b.HasKey("Id");

                    b.ToTable("FeePeriod");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.FeeType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<Guid>("FeePeriodId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("FeePeriodId");

                    b.HasIndex("StatusId");

                    b.ToTable("FeeType");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Gender", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Location", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Parent", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("Contact");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ParentTypeId");

                    b.Property<Guid>("StatusId");

                    b.Property<Guid>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.ParentType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ParentType");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.PaymentMode", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PaymentMode");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Permission", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Profile", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<long>("Contact");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("GenderId");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Middlename")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid?>("PhotoId");

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Religion", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Religion");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Role", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.RolePermission", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("PermissionId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Section", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Status", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Stream", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Stream");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Student", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<long?>("AadharNumber");

                    b.Property<string>("AdmissionNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("BloodGroupId");

                    b.Property<Guid?>("BusRouteId");

                    b.Property<string>("Cast")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("ClassId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Dateofbirth");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("GenderId");

                    b.Property<bool>("IsNew");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Middlename")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PreviousSchoolClass")
                        .HasMaxLength(50);

                    b.Property<string>("PreviousSchoolName")
                        .HasMaxLength(50);

                    b.Property<string>("Reference")
                        .HasMaxLength(20);

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<Guid>("ReligionId");

                    b.Property<int>("RollNumber");

                    b.Property<Guid?>("SectionId");

                    b.Property<Guid>("StatusId");

                    b.Property<Guid?>("StreamId");

                    b.Property<Guid>("StudentTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BloodGroupId");

                    b.HasIndex("BusRouteId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StreamId");

                    b.HasIndex("StudentTypeId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.StudentFeeDiscount", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("Amount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("FeeTypeId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<Guid>("StatusId");

                    b.Property<Guid>("StudentTypeId");

                    b.HasKey("Id");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentTypeId");

                    b.ToTable("StudentFeeDiscount");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.StudentType", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("StudentType");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.User", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<long>("Contact");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<Guid?>("ProfileId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("StatusId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.BusRoute", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Location", "Location")
                        .WithMany("BusRoute")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_BusRoute_Location");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("BusRoute")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_BusRoute_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Class", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("Class")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Class_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.ClassFee", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Class", "Class")
                        .WithMany("ClassFee")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassFee_Class");

                    b.HasOne("SchoolManagement.DataAccess.Models.FeeType", "FeeType")
                        .WithMany("ClassFee")
                        .HasForeignKey("FeeTypeId")
                        .HasConstraintName("FK_ClassFee_FeeType");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("ClassFee")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_ClassFee_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.ClassSection", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Class", "Class")
                        .WithMany("ClassSection")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassSection_Class");

                    b.HasOne("SchoolManagement.DataAccess.Models.Section", "Section")
                        .WithMany("ClassSection")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_ClassSection_Section");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("ClassSection")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_ClassSection_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.ClassStream", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Class", "Class")
                        .WithMany("ClassStream")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_ClassStream_Class");

                    b.HasOne("SchoolManagement.DataAccess.Models.Section", "Section")
                        .WithMany("ClassStream")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_ClassStream_Section");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("ClassStream")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_ClassStream_Status");

                    b.HasOne("SchoolManagement.DataAccess.Models.Stream", "Stream")
                        .WithMany("ClassStream")
                        .HasForeignKey("StreamId")
                        .HasConstraintName("FK_ClassStream_Stream");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Fee", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.FeeType", "FeeType")
                        .WithMany("Fee")
                        .HasForeignKey("FeeTypeId")
                        .HasConstraintName("FK_Fee_FeeType");

                    b.HasOne("SchoolManagement.DataAccess.Models.PaymentMode", "PaymentMode")
                        .WithMany("Fee")
                        .HasForeignKey("PaymentModeId")
                        .HasConstraintName("FK_Fee_PaymentMode");

                    b.HasOne("SchoolManagement.DataAccess.Models.Student", "Student")
                        .WithMany("Fee")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Fee_Student");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.FeeType", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.FeePeriod", "FeePeriod")
                        .WithMany("FeeType")
                        .HasForeignKey("FeePeriodId")
                        .HasConstraintName("FK_FeeType_FeePeriod");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("FeeType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_FeeType_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Location", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("Location")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Location_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Parent", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.ParentType", "ParentType")
                        .WithMany("Parent")
                        .HasForeignKey("ParentTypeId")
                        .HasConstraintName("FK_Parent_ParentType");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("Parent")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Parent_Status");

                    b.HasOne("SchoolManagement.DataAccess.Models.Student", "Student")
                        .WithMany("Parent")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Parent_Student");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Profile", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Gender", "Gender")
                        .WithMany("Profile")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Profile_Gender");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("Profile")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Profile_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Role", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("Role")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Role_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Section", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("Section")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Section_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Stream", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("Stream")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Stream_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.Student", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.BloodGroup", "BloodGroup")
                        .WithMany("Student")
                        .HasForeignKey("BloodGroupId")
                        .HasConstraintName("FK_Student_BloodGroup");

                    b.HasOne("SchoolManagement.DataAccess.Models.BusRoute", "BusRoute")
                        .WithMany("Student")
                        .HasForeignKey("BusRouteId")
                        .HasConstraintName("FK_Student_BusRoute");

                    b.HasOne("SchoolManagement.DataAccess.Models.Category", "Category")
                        .WithMany("Student")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Student_Category");

                    b.HasOne("SchoolManagement.DataAccess.Models.Class", "Class")
                        .WithMany("Student")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Student_Class");

                    b.HasOne("SchoolManagement.DataAccess.Models.Gender", "Gender")
                        .WithMany("Student")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Student_Gender");

                    b.HasOne("SchoolManagement.DataAccess.Models.Religion", "Religion")
                        .WithMany("Student")
                        .HasForeignKey("ReligionId")
                        .HasConstraintName("FK_Student_Religion");

                    b.HasOne("SchoolManagement.DataAccess.Models.Section", "Section")
                        .WithMany("Student")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK_Student_Section");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("Student")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_Student_Status");

                    b.HasOne("SchoolManagement.DataAccess.Models.Stream", "Stream")
                        .WithMany("Student")
                        .HasForeignKey("StreamId")
                        .HasConstraintName("FK_Student_Stream");

                    b.HasOne("SchoolManagement.DataAccess.Models.StudentType", "StudentType")
                        .WithMany("Student")
                        .HasForeignKey("StudentTypeId")
                        .HasConstraintName("FK_Student_StudentType");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.StudentFeeDiscount", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.FeeType", "FeeType")
                        .WithMany("StudentFeeDiscount")
                        .HasForeignKey("FeeTypeId")
                        .HasConstraintName("FK_StudentFeeDiscount_FeeType");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("StudentFeeDiscount")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_StudentFeeDiscount_Status");

                    b.HasOne("SchoolManagement.DataAccess.Models.StudentType", "StudentType")
                        .WithMany("StudentFeeDiscount")
                        .HasForeignKey("StudentTypeId")
                        .HasConstraintName("FK_StudentFeeDiscount_StudentType");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.StudentType", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("StudentType")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_StudentType_Status");
                });

            modelBuilder.Entity("SchoolManagement.DataAccess.Models.User", b =>
                {
                    b.HasOne("SchoolManagement.DataAccess.Models.Profile", "Profile")
                        .WithMany("User")
                        .HasForeignKey("ProfileId")
                        .HasConstraintName("FK_User_Profile");

                    b.HasOne("SchoolManagement.DataAccess.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role");

                    b.HasOne("SchoolManagement.DataAccess.Models.Status", "Status")
                        .WithMany("User")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_User_Status");
                });
#pragma warning restore 612, 618
        }
    }
}
